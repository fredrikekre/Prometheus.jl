var documenterSearchIndex = {"docs":
[{"location":"#Prometheus.jl","page":"Prometheus.jl","title":"Prometheus.jl","text":"","category":"section"},{"location":"#Introduction","page":"Prometheus.jl","title":"Introduction","text":"","category":"section"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"This package is a Julia client for Prometheus. If you are not familiar with Prometheus it is recommended to browse the upstream documentation. The documentation here focuses on the Julia client.","category":"page"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"Two of the basic concepts of a Prometheus client are Registries and Collectors. Registries are collections of collectors, and the collectors are the units responsible to record and capture metrics. Client libraries implement a default registry which all collectors implicity register with, so for basic usage there is no need to interact with a registry (see Default registry).","category":"page"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"The third important concept is Exposition of the collected metrics. Typically metrics are exposed over a HTTP server, as in the Quickstart-example just below. See the section about Exposition for more details and examples on how metrics can be exposed.","category":"page"},{"location":"#Quickstart","page":"Prometheus.jl","title":"Quickstart","text":"","category":"section"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"Install Prometheus.jl and HTTP.jl using the package manager:\npkg> add Prometheus HTTP\nPaste the following code into a Julia REPL.\n# Load the packages\nusing Prometheus, HTTP\n\n# Create a Counter metric\nconst request_counter = Prometheus.Counter(\"request_count\", \"Number of handled requests\")\n\n# Start a HTTP server on localhost port 8000 to server the metrics\nserver = HTTP.listen!(8000) do http\n    Prometheus.inc(request_counter) # Increment the request counter\n    return Prometheus.expose(http)  # Expose the metrics\nend\nVisit http://localhost:8000 in your browser. You will see something like the following\n# HELP gc_alloc_bytes_total Total number of allocated bytes\n# TYPE gc_alloc_bytes_total counter\ngc_alloc_bytes_total 365578814\n\n[...]\n\n# HELP request_count Number of handled requests\n# TYPE request_count counter\nrequest_count 1\nThe output contains some default metrics related to the running process, as well as the request counter that we added ourselves. Every time you refresh, the counter will increment its value. close(server) will shutdown the server.","category":"page"},{"location":"#Collectors","page":"Prometheus.jl","title":"Collectors","text":"","category":"section"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"This section documents the collectors that are currently supported. This include the \"basic\" collectors (Counter, Gauge, Summary) as well as some custom collectors (GCCollector, ProcessCollector). There is also a section on how to implement your own collector, see Custom collectors.","category":"page"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"Upstream documentation:","category":"page"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"https://prometheus.io/docs/concepts/metric_types/\nhttps://prometheus.io/docs/instrumenting/writing_clientlibs/#metrics","category":"page"},{"location":"#Counter","page":"Prometheus.jl","title":"Counter","text":"","category":"section"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"Quoting the upstream documentation:","category":"page"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"A counter is a cumulative metric that represents a single monotonically increasing counter whose value can only increase or be reset to zero on restart. For example, you can use a counter to represent the number of requests served, tasks completed, or errors.Do not use a counter to expose a value that can decrease. For example, do not use a counter for the number of currently running processes; instead use a gauge.","category":"page"},{"location":"#Counter-API-reference","page":"Prometheus.jl","title":"Counter API reference","text":"","category":"section"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"Prometheus.Counter(::String, ::String; kwargs...)\nPrometheus.inc(::Prometheus.Counter, ::Any)","category":"page"},{"location":"#Prometheus.Counter-Tuple{String, String}","page":"Prometheus.jl","title":"Prometheus.Counter","text":"Prometheus.Counter(name, help; registry=DEFAULT_REGISTRY)\n\nConstruct a Counter collector.\n\nArguments\n\nname :: String: the name of the counter metric.\nhelp :: String: the documentation for the counter metric.\n\nKeyword arguments\n\nregistry :: Prometheus.CollectorRegistry: the registry in which to register the collector. If not specified the default registry is used. Pass registry = nothing to skip registration.\n\nMethods\n\nPrometheus.inc: increment the counter.\n\n\n\n\n\n","category":"method"},{"location":"#Prometheus.inc-Tuple{Prometheus.Counter, Any}","page":"Prometheus.jl","title":"Prometheus.inc","text":"Prometheus.inc(counter::Counter, v = 1)\n\nIncrement the value of the counter with v. The value defaults to v = 1.\n\nThrow a Prometheus.ArgumentError if v < 0 (a counter must not decrease).\n\n\n\n\n\n","category":"method"},{"location":"#Gauge","page":"Prometheus.jl","title":"Gauge","text":"","category":"section"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"Quoting the upstream documentation:","category":"page"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"A gauge is a metric that represents a single numerical value that can arbitrarily go up and down.Gauges are typically used for measured values like temperatures or current memory usage, but also \"counts\" that can go up and down, like the number of concurrent requests.","category":"page"},{"location":"#Gauge-API-reference","page":"Prometheus.jl","title":"Gauge API reference","text":"","category":"section"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"Prometheus.Gauge(::String, ::String; kwargs...)\nPrometheus.inc(::Prometheus.Gauge, ::Any)\nPrometheus.dec(::Prometheus.Gauge, ::Any)\nPrometheus.set(::Prometheus.Gauge, ::Any)\nPrometheus.set_to_current_time(::Prometheus.Gauge)\nPrometheus.@time\nPrometheus.@inprogress","category":"page"},{"location":"#Prometheus.Gauge-Tuple{String, String}","page":"Prometheus.jl","title":"Prometheus.Gauge","text":"Prometheus.Gauge(name, help; registry=DEFAULT_REGISTRY)\n\nConstruct a Gauge collector.\n\nArguments\n\nname :: String: the name of the gauge metric.\nhelp :: String: the documentation for the gauge metric.\n\nKeyword arguments\n\nregistry :: Prometheus.CollectorRegistry: the registry in which to register the collector. If not specified the default registry is used. Pass registry = nothing to skip registration.\n\nMethods\n\nPrometheus.inc: increment the value of the gauge.\nPrometheus.dec: decrement the value of the gauge.\nPrometheus.set: set the value of the gauge.\nPrometheus.set_to_current_time: set the value of the gauge to the current unixtime.\nPrometheus.@time: time a section and set the value of the the gauge to the elapsed time.\nPrometheus.@inprogress: Track number of inprogress operations; increment the gauge when entering the section, decrement it when leaving.\n\n\n\n\n\n","category":"method"},{"location":"#Prometheus.inc-Tuple{Prometheus.Gauge, Any}","page":"Prometheus.jl","title":"Prometheus.inc","text":"Prometheus.inc(gauge::Gauge, v = 1)\n\nIncrement the value of the gauge with v. v defaults to v = 1.\n\n\n\n\n\n","category":"method"},{"location":"#Prometheus.dec-Tuple{Prometheus.Gauge, Any}","page":"Prometheus.jl","title":"Prometheus.dec","text":"Prometheus.dec(gauge::Gauge, v = 1)\n\nDecrement the value of the gauge with v. v defaults to v = 1.\n\n\n\n\n\n","category":"method"},{"location":"#Prometheus.set-Tuple{Prometheus.Gauge, Any}","page":"Prometheus.jl","title":"Prometheus.set","text":"Prometheus.set(gauge::Gauge, v)\n\nSet the value of the gauge to v.\n\n\n\n\n\n","category":"method"},{"location":"#Prometheus.set_to_current_time-Tuple{Prometheus.Gauge}","page":"Prometheus.jl","title":"Prometheus.set_to_current_time","text":"Prometheus.set_to_current_time(gauge::Gauge)\n\nSet the value of the gauge to the current unixtime in seconds.\n\n\n\n\n\n","category":"method"},{"location":"#Prometheus.@time","page":"Prometheus.jl","title":"Prometheus.@time","text":"Prometheus.@time collector expr\n\nTime the evaluation of expr and send the elapsed time in seconds to collector. The specific action depends on the type of collector:\n\ncollector :: Gauge: set the value of the gauge to the elapsed time (Prometheus.set)\ncollector :: Summary: add the elapsed time as an observation (Prometheus.observe)\n\nThe expression to time, expr, can be a single expression (for example a function call), or a code block (begin, let, etc), e.g.\n\nPrometheus.@time collector <expr>\n\nPrometheus.@time collector begin\n    <expr>\nend\n\nIt is also possible to apply the macro to a function definition, i.e.\n\nPrometheus.@time collector function time_this(args...)\n    # function body\nend\n\nto time every call to this function (covering all call sites).\n\n\n\n\n\n","category":"macro"},{"location":"#Prometheus.@inprogress","page":"Prometheus.jl","title":"Prometheus.@inprogress","text":"Prometheus.@inprogress collector expr\n\nTrack the number of concurrent in-progress evaluations of expr. From the builtin collectors this is only applicable to the Gauge â€“ the value of the gauge is incremented with 1 when entering the section, and decremented with 1 when exiting the section.\n\nThe expression, expr, can be a single expression (for example a function call), or a code block (begin, let, etc), e.g.\n\nPrometheus.@inprogress collector <expr>\n\nPrometheus.@inprogress collector begin\n    <expr>\nend\n\nIt is also possible to apply the macro to a function definition, i.e.\n\nPrometheus.@inprogress collector function track_this(args...)\n    # function body\nend\n\nto track number of concurrent in-progress calls (covering all call sites).\n\n\n\n\n\n","category":"macro"},{"location":"#Summary","page":"Prometheus.jl","title":"Summary","text":"","category":"section"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"Quoting the upstream documentation:","category":"page"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"Similar to a histogram, a summary samples observations (usually things like request durations and response sizes). While it also provides a total count of observations and a sum of all observed values, it calculates configurable quantiles over a sliding time window.","category":"page"},{"location":"#Summary-API-reference","page":"Prometheus.jl","title":"Summary API reference","text":"","category":"section"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"Prometheus.Summary(::String, ::String; kwargs...)\nPrometheus.observe(::Prometheus.Summary, ::Any)","category":"page"},{"location":"#Prometheus.Summary-Tuple{String, String}","page":"Prometheus.jl","title":"Prometheus.Summary","text":"Prometheus.Summary(name, help; registry=DEFAULT_REGISTRY)\n\nConstruct a Summary collector.\n\nArguments\n\nname :: String: the name of the summary metric.\nhelp :: String: the documentation for the summary metric.\n\nKeyword arguments\n\nregistry :: Prometheus.CollectorRegistry: the registry in which to register the collector. If not specified the default registry is used. Pass registry = nothing to skip registration.\n\nMethods\n\nPrometheus.observe: add an observation to the summary.\nPrometheus.@time: time a section and add the elapsed time as an observation.\n\n\n\n\n\n","category":"method"},{"location":"#Prometheus.observe-Tuple{Prometheus.Summary, Any}","page":"Prometheus.jl","title":"Prometheus.observe","text":"Prometheus.observe(summary::Summary, v)\n\nAdd the observed value v to the summary. This increases the sum and count of the summary with v and 1, respectively.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"Prometheus.@time","category":"page"},{"location":"#Prometheus.@time-index","page":"Prometheus.jl","title":"Prometheus.@time","text":"Prometheus.@time collector expr\n\nTime the evaluation of expr and send the elapsed time in seconds to collector. The specific action depends on the type of collector:\n\ncollector :: Gauge: set the value of the gauge to the elapsed time (Prometheus.set)\ncollector :: Summary: add the elapsed time as an observation (Prometheus.observe)\n\nThe expression to time, expr, can be a single expression (for example a function call), or a code block (begin, let, etc), e.g.\n\nPrometheus.@time collector <expr>\n\nPrometheus.@time collector begin\n    <expr>\nend\n\nIt is also possible to apply the macro to a function definition, i.e.\n\nPrometheus.@time collector function time_this(args...)\n    # function body\nend\n\nto time every call to this function (covering all call sites).\n\n\n\n\n\n","category":"macro"},{"location":"#GCCollector","page":"Prometheus.jl","title":"GCCollector","text":"","category":"section"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"A collector that exports metrics about allocations and garbage collection (for example number of allocations, number of bytes allocated, time spent in garbage collection, etc). These metrics have the julia_gc_ prefix in their name.","category":"page"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"A GCCollector is registered automatically with the default registry, see Default registry for more details.","category":"page"},{"location":"#GCCollector-API-reference","page":"Prometheus.jl","title":"GCCollector API reference","text":"","category":"section"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"Prometheus.GCCollector(; kwargs...)","category":"page"},{"location":"#Prometheus.GCCollector-Tuple{}","page":"Prometheus.jl","title":"Prometheus.GCCollector","text":"Prometheus.GCCollector(; registry=DEFAULT_REGISTRY)\n\nCreate a collector that exports metrics about allocations and garbage collection.\n\nKeyword arguments\n\nregistry :: Prometheus.CollectorRegistry: the registry in which to register the collector. The default registry is used by default. Pass registry = nothing to skip registration.\n\nnote: Note\nA GCCollector is registered automatically with the default registry. If necessary it can be removed by callingPrometheus.unregister(Prometheus.DEFAULT_REGISTRY, Prometheus.GC_COLLECTOR)\n\n\n\n\n\n","category":"method"},{"location":"#ProcessCollector","page":"Prometheus.jl","title":"ProcessCollector","text":"","category":"section"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"A collector that exports metrics about a running process, for example CPU seconds and metrics about I/O operations. Metrics from this collector have the process_ prefix in their name. This collector is only available on Linux since it requires the /proc file system.","category":"page"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"A ProcessCollector for the current process is registered automatically with the default registry, see Default registry for more details.","category":"page"},{"location":"#ProcessCollector-API-reference","page":"Prometheus.jl","title":"ProcessCollector API reference","text":"","category":"section"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"Prometheus.ProcessCollector(::Function; kwargs...)","category":"page"},{"location":"#Prometheus.ProcessCollector-Tuple{Function}","page":"Prometheus.jl","title":"Prometheus.ProcessCollector","text":"Prometheus.ProcessCollector(pid; registry=DEFAULT_REGISTRY)\n\nCreate a process collector for the process id given by the pid function. The collector exposes metrics about the process' CPU time, start time, memory usage, file usage, and I/O operations.\n\nArguments\n\npid :: Function: a function returning a process id as a string or integer for which to collect metrics. By default the \"self\" pid is used, i.e. the current process.\n\nKeyword arguments\n\nregistry :: Prometheus.CollectorRegistry: the registry in which to register the collector. The default registry is used by default. Pass registry = nothing to skip registration.\n\nnote: Note\nA ProcessCollector for the current process is registered automatically with the default registry. If necessary it can be removed by callingPrometheus.unregister(Prometheus.DEFAULT_REGISTRY, Prometheus.PROCESS_COLLECTOR)\n\nnote: Note\nThe process collector is currently only available on Linux since it requires the /proc file system. On Windows and macOS this collector will not expose any metrics.\n\n\n\n\n\n","category":"method"},{"location":"#Custom-collectors","page":"Prometheus.jl","title":"Custom collectors","text":"","category":"section"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"RandomCollector","category":"page"},{"location":"#Labels","page":"Prometheus.jl","title":"Labels","text":"","category":"section"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"Prometheus allows attaching labels to metrics, see the upstream documentation:","category":"page"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"https://prometheus.io/docs/practices/naming/#labels\nhttps://prometheus.io/docs/practices/instrumentation/#use-labels\nhttps://prometheus.io/docs/practices/instrumentation/#do-not-overuse-labels","category":"page"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"In this package labeling of collectors is done with Prometheus.Family. A collector family consist of a number of regular collectors, the children, with unique labels.","category":"page"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"A concrete example is a HTTP request Counter, where we might also want to keep track of the target resource and the status code of the request. Such instrumentation can be implemented as follows","category":"page"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"# Custom label struct\nstruct RequestLabels\n    target::String\n    status_code::Int\nend\n\n# Create the counter family\nrequest_counter = Prometheus.Family{Prometheus.Counter}(\n    \"http_requests\", \"Total number of HTTP requests\", RequestLabels\n)\n\n# Extract a Counter for a specific set of labels\ncounter = Prometheus.labels(request_counter, RequestLabels(\"/api\", 200))\n\n# Increment the counter\nPrometheus.inc(counter)","category":"page"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"Note that using a custom label struct is optional, refer to the constructor Prometheus.Family and Prometheus.labels for alternative methods.","category":"page"},{"location":"#Family-API-reference","page":"Prometheus.jl","title":"Family API reference","text":"","category":"section"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"Prometheus.Family{C}(::String, ::String, ::Any; kwargs...) where C\nPrometheus.labels(::Prometheus.Family{C, N}, ::Any) where {C, N}\nPrometheus.remove(::Prometheus.Family{<:Any, N}, ::Any) where {N}\nPrometheus.clear(::Prometheus.Family)","category":"page"},{"location":"#Prometheus.Family-Union{Tuple{C}, Tuple{String, String, Any}} where C","page":"Prometheus.jl","title":"Prometheus.Family","text":"Prometheus.Family{C}(name, help, args..., label_names; registry=DEFAULT_REGISTRY, kwargs...)\n\nCreate a labeled collector family with labels given by label_names. For every new set of label values encountered a new collector of type C <: Collector will be created, see Prometheus.labels.\n\nArguments\n\nname :: String: the name of the family metric.\nhelp :: String: the documentation for the family metric.\nargs...: any extra positional arguments required for Cs constructor, see Prometheus.labels.\nlabel_names: the label names for the family. Label names can be given as either of the following (typically matching the methods label values will be given later, see Prometheus.labels):\na tuple of symbols or strings, e.g. (:target, :status_code) or (\"target\", \"status_code\")\na named tuple type, e.g. @NamedTuple{target::String, status_code::Int} where the names are used as the label names\na custom struct type, e.g. RequestLabels defined as\nstruct RequestLabels\n    target::String\n    status_code::Int\nend\nwhere the field names are used for the label names.\n\nKeyword arguments\n\nregistry :: Prometheus.CollectorRegistry: the registry in which to register the collector. If not specified the default registry is used. Pass registry = nothing to skip registration.\nkwargs...: any extra keyword arguments required for Cs constructor, see Prometheus.labels.\n\nMethods\n\nPrometheus.labels: get or create the collector for a specific set of labels.\nPrometheus.remove: remove the collector for a specific set of labels.\nPrometheus.clear: remove all collectors in the family.\n\nExamples\n\n# Construct a family of Counters\ncounter_family = Prometheus.Family{Counter}(\n    \"http_requests\", \"Number of HTTP requests\", (:target, :status_code),\n)\n\n# Increment the counter for the labels `target=\"/api\"` and `status_code=200`\nPrometheus.inc(Prometheus.labels(counter_family, (target=\"/api\", status_code=200)))\n\n\n\n\n\n","category":"method"},{"location":"#Prometheus.labels-Union{Tuple{N}, Tuple{C}, Tuple{Prometheus.Family{C, N}, Any}} where {C, N}","page":"Prometheus.jl","title":"Prometheus.labels","text":"Prometheus.labels(family::Family{C}, label_values) where C\n\nGet or create the collector of type C from the family corresponding to the labels given by label_values. If no collector exist for the input labels a new one is created by invoking the C constructor as C(name, help, args...; kwargs..., registry=nothing), where name, help, args..., and kwargs... are the arguments from the family constructor, see Family.\n\nSimilarly to when creating the Family, label_values can be given as either of the following:\n\na tuple, e.g. (\"/api\", 200)\na named tuple with names matching the label names, e.g.(target=\"/api\", status_code=200)\na struct instance with field names matching the label names , e.g. RequestLabels(\"/api\", 200)\n\nAll non-string values (e.g. 200 in the examples above) are stringified using string.\n\nnote: Note\nThis method does an acquire/release of a lock, and a dictionary lookup, to find the collector matching the label names. For typical applications this overhead does not matter (below 100ns for some basic benchmarks) but it is safe to cache the returned collector if required.\n\n\n\n\n\n","category":"method"},{"location":"#Prometheus.remove-Union{Tuple{N}, Tuple{Prometheus.Family{<:Any, N}, Any}} where N","page":"Prometheus.jl","title":"Prometheus.remove","text":"Prometheus.remove(family::Family, label_values)\n\nRemove the collector corresponding to label_values. Effectively this resets the collector since Prometheus.labels will recreate the collector when called with the same label names.\n\nRefer to Prometheus.labels for how to specify label_values.\n\nnote: Note\nThis method invalidates cached collectors for the label names.\n\n\n\n\n\n","category":"method"},{"location":"#Prometheus.clear-Tuple{Prometheus.Family}","page":"Prometheus.jl","title":"Prometheus.clear","text":"Prometheus.clear(family::Family)\n\nRemove all collectors in the family. Effectively this resets the collectors since Prometheus.labels will recreate them when needed.\n\nnote: Note\nThis method invalidates all cached collectors.\n\n\n\n\n\n","category":"method"},{"location":"#Registries","page":"Prometheus.jl","title":"Registries","text":"","category":"section"},{"location":"#Default-registry","page":"Prometheus.jl","title":"Default registry","text":"","category":"section"},{"location":"#Exposition","page":"Prometheus.jl","title":"Exposition","text":"","category":"section"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"Prometheus support","category":"page"},{"location":"","page":"Prometheus.jl","title":"Prometheus.jl","text":"Prometheus.expose","category":"page"},{"location":"#Prometheus.expose","page":"Prometheus.jl","title":"Prometheus.expose","text":"Prometheus.expose(file::String, reg::CollectorRegistry = DEFAULT_REGISTRY)\n\nExport all metrics in reg by writing them to the file file.\n\n\n\n\n\nexpose(io::IO, reg::CollectorRegistry = DEFAULT_REGISTRY)\n\nExport all metrics in reg by writing them to the I/O stream io.\n\n\n\n\n\nexpose(http::HTTP.Stream, reg::CollectorRegistry = DEFAULT_REGISTRY; kwargs...)\n\nExport all metrics in reg by writing them to the HTTP stream http.\n\nThe caller is responsible for checking e.g. the HTTP method and URI target. For HEAD requests this method do not write a body, however.\n\n\n\n\n\n","category":"function"}]
}
